CFile(f, classes, main) ::= <<
#include \<stdio.h>
#include \<stdlib.h>

typedef struct {
    char *name;
    int size;
    void (*(*_vtable)[])();
} metadata;

typedef struct {
    metadata *clazz;
} object;

object *alloc(metadata *clazz) {
    object *p = calloc(1, clazz->size); // wipe to 0s
    p->clazz = clazz;
    return p;
}



<classes : {classDef | // D e f i n e  C l a s s  <classDef.class.className><\n><classDef><\n>}>
<main>
>>

ClassDef(class, fields, methods, vtable) ::= <<
typedef struct {
    metadata *clazz;
    <fields : {varDef | <varDef>;}; separator="\n">
} <class.className>;



<methods; separator="\n">

<vtable.keys:{k | #define <class.className>_<k>_SLOT : <vtable.(k)>}>

metadata <class.className>_metadata = {"<class.className>", sizeof(<class.className>), &<class.className>_vtable};
>>

MethodDef(m,funcName,returnType,args,body) ::= <<
<returnType> <m.className>_<funcName>(<args; separator={, }>)
{
    <body>
}
>>

MainMethod(main,funcName,returnType,args,body) ::= <<
int main(int argc, char *argv[])
{
    <body>
    return 0;
}
>>

Block(block, locals, instrs) ::= <<
<locals : {varDef | <varDef>;}; separator="\n">

<instrs;separator="\n">
>>

VarDef(var, type)   ::= "<type> <var.id>"

FuncName(f)         ::= "<f.className>_<f.funcName>"

ObjectTypeSpec(o)   ::= "<o.name> *"
PrimitiveTypeSpec(p)::= "<p.name>"

AssignStat(a,left,right) ::= "<left> = <right>;"
PrintStringStat(p)  ::= "printf(<p.printStat>);"
PrintStat(p,args)   ::= "printf(<p.printStat>, <args;separator={, }>);"
CallStat(c,call)    ::= "<call>"
CtorCall(ctor)      ::= "alloc(&<ctor.classname>_metadata)"
ReturnStat(r,expr)  ::= "return <expr>;"
WhileStat(w,condition, stat) ::= <<
while(<condition>)
{
    <stat>;
}
>>
IfStat(i,condition, stat) ::= <<
if(<condition>)
{
    <stat> ;
}
>>
IfElseStat(i,condition, stat, elseStat) ::= <<
if(<condition>)
{
    <stat> ;
}
else
{
    <elseStat> ;
}
>>

NullRef(n)          ::= "NULL"

LiteralRef(lit)     ::= "<lit.id>"
VarRef(v)           ::= "<v.id>"
FieldRef(f, object) ::= "<object>-><f.id>"
ThisRef(t)          ::= "this"
MethodCall(m, receiver, receiverType, fptrType, args) ::= <<
(*(<fptrType>)(*(<receiver>)->clazz->_vtable)[<m.classname>_<m.name>_SLOT])(<args;separator={,}>)
>>

FuncPtrType(f, returnType, argTypes) ::= "<returnType> (*)(<argTypes;separator={,}>)"
TypeCast(cast, type, expr) ::= "((<type>)<expr>)"
